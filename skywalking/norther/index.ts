import * as k8s from "@pulumi/kubernetes";

const deploy_spec = [
    {
        namespace: {
            metadata: {
                name: "skywalking",
                annotations: {},
                labels: {}
            },
            spec: {}
        },
        secret: [
            {
                metadata: {
                    name: "auth-secret",
                    namespace: "skywalking",
                    annotations: {},
                    labels: {}
                },
                type: "Opaque",
                data: {
                    auth: Buffer.from("admin:$apr1$sdfvLCI7$L0iMWekg57WuLr7CVFB5f.").toString('base64')
                },
                stringData: {}
            }
        ],
        configmap: [
            {
                metadata: {
                    name: "kibana-custom-conf",
                    namespace: "skywalking",
                    annotations: {},
                    labels: {}
                },
                data: {
                    "kibana.yml": `
elasticsearch.hosts: [http://elasticsearch:9200]
logging.quiet: true
pid.file: /opt/bitnami/kibana/tmp/kibana.pid
server.basePath: "/kibana"
server.host: "0.0.0.0"
server.port: 5601
server.rewriteBasePath: true
`,
                }
            }
        ],
        helm: [
            {
                namespace: "skywalking",
                name: "elasticsearch",
                chart: "../../_chart/elasticsearch-19.3.0.tgz",
                repository: "",
                version: "19.3.0",
                values: {
                    image: { tag: "7.17.4-debian-11-r10" },
                    security: {
                        enabled: false,
                        elasticPassword: "password",
                        tls: {
                            autoGenerated: true,
                            verificationMode: "none"
                        }
                    },
                    name: "skywalking",
                    extraConfig: {
                        cluster: {
                            max_shards_per_node: 10000
                        }
                    },
                    master: {
                        replicaCount: 3,
                        resources: {
                            requests: { cpu: "100m", memory: "512Mi" }
                        },
                        heapSize: "128m",
                        podLabels: { customer: "demo", environment: "dev", project: "cluster", group: "norther", datacenter: "dc01", domain: "local" },
                        persistence: { storageClass: "longhorn", size: "8Gi" }
                    },
                    data: {
                        replicaCount: 2,
                        resources: {
                            limits: { cpu: "1000m", memory: "4096Mi" },
                            requests: { cpu: "1000m", memory: "4096Mi" }
                        },
                        heapSize: "3072m",
                        podLabels: { customer: "demo", environment: "dev", project: "cluster", group: "norther", datacenter: "dc01", domain: "local" },
                        persistence: { storageClass: "longhorn", size: "30Gi" }
                    },
                    coordinating: { replicaCount: 0 },
                    ingest: { enabled: false },
                    metrics: {
                        enabled: true,
                        extraArgs: ["--es.timeout=45s"],
                        resources: {
                            limits: { cpu: "100m", memory: "128Mi" },
                            requests: { cpu: "100m", memory: "128Mi" }
                        },
                        readinessProbe: {
                            enabled: true,
                            initialDelaySeconds: 5,
                            periodSeconds: 10,
                            timeoutSeconds: 45,
                            successThreshold: 1,
                            failureThreshold: 5,
                        },
                        podLabels: { customer: "demo", environment: "dev", project: "cluster", group: "norther", datacenter: "dc01", domain: "local" },
                        serviceMonitor: {
                            enabled: true,
                            relabelings: [
                                { sourceLabels: ["__meta_kubernetes_pod_label_customer"], targetLabel: "customer" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_environment"], targetLabel: "environment" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_project"], targetLabel: "project" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_group"], targetLabel: "group" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_datacenter"], targetLabel: "datacenter" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_domain"], targetLabel: "domain" }
                            ],
                        },
                        prometheusRule: { enabled: true, rules: [] }
                    },
                    volumePermissions: {
                        enabled: true,
                        resources: {
                            limits: { cpu: "100m", memory: "128Mi" },
                            requests: { cpu: "100m", memory: "128Mi" }
                        }
                    },
                    sysctlImage: {
                        enabled: true,
                        resources: {
                            limits: { cpu: "100m", memory: "128Mi" },
                            requests: { cpu: "100m", memory: "128Mi" }
                        }
                    }
                }
            },
            {
                namespace: "skywalking",
                name: "kibana",
                chart: "../../_chart/kibana-10.2.2.tgz",
                repository: "",
                version: "10.2.2",
                values: {
                    image: { tag: "7.17.4-debian-11-r9" },
                    replicaCount: 1,
                    updateStrategy: {
                        type: "RollingUpdate",
                        rollingUpdate: {
                            maxSurge: 0,
                            maxUnavailable: 1
                        }
                    },
                    //                    plugins: ["https://github.com/pjhampton/kibana-prometheus-exporter/releases/download/7.17.4/kibanaPrometheusExporter-7.17.4.zip"],
                    configurationCM: "kibana-custom-conf",
                    volumePermissions: {
                        enabled: true,
                        resources: {
                            limits: { cpu: "100m", memory: "128Mi" },
                            requests: { cpu: "100m", memory: "128Mi" }
                        }
                    },
                    readinessProbe: { enabled: false },
                    customReadinessProbe: {
                        failureThreshold: 6,
                        httpGet: {
                            path: "/kibana/status",
                            port: "http",
                            scheme: "HTTP"
                        },
                        initialDelaySeconds: 90,
                        periodSeconds: 10,
                        successThreshold: 1,
                        timeoutSeconds: 5,
                    },
                    livenessProbe: { enabled: false },
                    customLivenessProbe: {
                        failureThreshold: 6,
                        httpGet: {
                            path: "/kibana/login",
                            port: "http",
                            scheme: "HTTP"
                        },
                        initialDelaySeconds: 90,
                        periodSeconds: 10,
                        successThreshold: 1,
                        timeoutSeconds: 5,
                    },
                    persistence: { storageClass: "longhorn", size: "8Gi" },
                    ingress: {
                        enabled: true,
                        hostname: "norther.example.com",
                        path: "/kibana",
                        ingressClassName: "nginx",
                    },
                    resources: {
                        limits: { cpu: "500m", memory: "1024Mi" },
                        requests: { cpu: "500m", memory: "1024Mi" }
                    },
                    podLabels: { customer: "demo", environment: "dev", project: "cluster", group: "norther", datacenter: "dc01", domain: "local" },
                    metrics: {
                        enabled: false,
                        serviceMonitor: {
                            enabled: false,
                            relabelings: [
                                { sourceLabels: ["__meta_kubernetes_pod_label_customer"], targetLabel: "customer" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_environment"], targetLabel: "environment" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_project"], targetLabel: "project" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_group"], targetLabel: "group" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_datacenter"], targetLabel: "datacenter" },
                                { sourceLabels: ["__meta_kubernetes_pod_label_domain"], targetLabel: "domain" }
                            ],
                        }
                    },
                    elasticsearch: {
                        hosts: ["elasticsearch"],
                        port: "9200",
                        security: {
                            auth: {
                                enabled: false,
                                kibanaUsername: "elastic",
                                kibanaPassword: "password"
                            },
                            tls: {
                                enabled: false,
                                verificationMode: "none"
                            }
                        }
                    }
                }
            },
            {
                namespace: "skywalking",
                name: "skywalking",
                chart: "../../_chart/skywalking-4.3.0.tgz",
                repository: "",
                version: "4.3.0",
                values: {
                    oap: {
                        storageType: "elasticsearch",
                        replicas: 1,
                        image: { tag: "9.2.0" },
                        javaOpts: "-Xmx3g -Xms3g",
                        resources: {
                            requests: { cpu: "1000m", memory: "4096Mi" }
                        }
                    },
                    ui: {
                        replicas: 1,
                        image: { tag: "9.2.0" },
                        ingress: {
                            enabled: true,
                            annotations: {
                                "kubernetes.io/ingress.class": "nginx",
                                "nginx.ingress.kubernetes.io/auth-type": "basic",
                                "nginx.ingress.kubernetes.io/auth-secret": "auth-secret",
                                "nginx.ingress.kubernetes.io/auth-realm": "Authentication Required ",
                            },
                            path: "/",
                            hosts: ["skywalking.example.com"]
                        }
                    },
                    elasticsearch: { enabled: false }
                }
            }
        ]
    }
]

for (var i in deploy_spec) {
    // Create Kubernetes Namespace.
    const namespace = new k8s.core.v1.Namespace(deploy_spec[i].namespace.metadata.name, {
        metadata: deploy_spec[i].namespace.metadata,
        spec: deploy_spec[i].namespace.spec
    });
    // Create Kubernetes Secret.
    for (var secret_index in deploy_spec[i].secret) {
        const secret = new k8s.core.v1.Secret(deploy_spec[i].secret[secret_index].metadata.name, {
            metadata: deploy_spec[i].secret[secret_index].metadata,
            type: deploy_spec[i].secret[secret_index].type,
            data: deploy_spec[i].secret[secret_index].data,
            stringData: deploy_spec[i].secret[secret_index].stringData
        }, { dependsOn: [namespace] });
    }
    // Create Kubernetes ConfigMap.
    for (var configmap_index in deploy_spec[i].configmap) {
        const configmap = new k8s.core.v1.ConfigMap(deploy_spec[i].configmap[configmap_index].metadata.name, {
            metadata: deploy_spec[i].configmap[configmap_index].metadata,
            data: deploy_spec[i].configmap[configmap_index].data,
        }, { dependsOn: [namespace] });
    }
    // Create Release Resource.
    for (var helm_index in deploy_spec[i].helm) {
        const release = new k8s.helm.v3.Release(deploy_spec[i].helm[helm_index].name, {
            namespace: deploy_spec[i].helm[helm_index].namespace,
            name: deploy_spec[i].helm[helm_index].name,
            chart: deploy_spec[i].helm[helm_index].chart,
            version: deploy_spec[i].helm[helm_index].version,
            values: deploy_spec[i].helm[helm_index].values,
            skipAwait: true,
        }, { dependsOn: [namespace] });
    }
}