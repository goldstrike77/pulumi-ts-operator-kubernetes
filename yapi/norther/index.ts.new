import * as pulumi from "@pulumi/pulumi";
import * as k8s from "@pulumi/kubernetes";

let config = new pulumi.Config();

const deploy_spec = [
    {
        namespace: {
            metadata: {
                name: "yapi",
                annotations: {},
                labels: {}
            },
            spec: {}
        },
        helm: {
            namespace: "yapi",
            name: "mongodb",
            chart: "mongodb",
            repository: "https://charts.bitnami.com/bitnami",
            version: "13.1.4",
            values: {
                image: { tag: "4.4.15-debian-10-r8" },
                architecture: "standalone",
                auth: {
                    enabled: true,
                    rootUser: "root",
                    rootPassword: config.require("rootPassword"),
                    usernames: ["yapi"],
                    passwords: [config.require("yapiPassword")],
                    databases: ["yapi"]
                },
                disableSystemLog: true,
                updateStrategy: {
                    type: "RollingUpdate",
                    rollingUpdate: {
                        maxSurge: 0,
                        maxUnavailable: 1
                    }
                },
                podLabels: { customer: "demo", environment: "dev", project: "cluster", group: "norther", datacenter: "dc01", domain: "local" },
                podSecurityContext: { sysctls: [{ name: "net.core.somaxconn", value: "10000" }] },
                resources: {
                    limits: { cpu: "500m", memory: "1024Mi" },
                    requests: { cpu: "500m", memory: "1024Mi" }
                },
                livenessProbe: { initialDelaySeconds: 60, timeoutSeconds: 30 },
                readinessProbe: { enabled: false },
                persistence: { enabled: true, storageClass: "longhorn", size: "8Gi" },
                volumePermissions: {
                    enabled: true,
                    resources: {
                        limits: { cpu: "100m", memory: "128Mi" },
                        requests: { cpu: "100m", memory: "128Mi" }
                    },
                },
                metrics: {
                    enabled: false,
                    resources: {
                        limits: { cpu: "100m", memory: "128Mi" },
                        requests: { cpu: "100m", memory: "128Mi" }
                    },
                    livenessProbe: { initialDelaySeconds: 90, timeoutSeconds: 30 },
                    readinessProbe: { initialDelaySeconds: 90, timeoutSeconds: 30 },
                    serviceMonitor: {
                        enabled: true,
                        interval: "60s",
                        relabelings: [
                            { sourceLabels: ["__meta_kubernetes_pod_label_customer"], targetLabel: "customer" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_environment"], targetLabel: "environment" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_project"], targetLabel: "project" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_group"], targetLabel: "group" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_datacenter"], targetLabel: "datacenter" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_domain"], targetLabel: "domain" }
                        ]
                    },
                    prometheusRule: {
                        enabled: false,
                        rules: []
                    }
                }
            }
        },
        deployment: {
            metadata: {
                labels: {
                    app: "yapi"
                },
                name: "yapi",
                namespace: "yapi"
            },
            spec: {
                replicas: 1,
                selector: {
                    matchLabels: {
                        app: "yapi"
                    }
                },
                strategy: {
                    rollingUpdate: {
                        maxSurge: 0,
                        maxUnavailable: 1
                    }
                },
                template: {
                    metadata: {
                        labels: {
                            app: "yapi",
                            customer: "demo",
                            datacenter: "dc01",
                            domain: "local",
                            environment: "dev",
                            group: "norther",
                            project: "cluster"
                        }
                    },
                    spec: {
                        containers: [
                            {
                                image: "registry.cn-hangzhou.aliyuncs.com/goldstrike/yapi:v1.9.2@sha256:712c91b71274ebbeb94cb8cfa6927131911967a9c8ab888b8b2c7b55f14a49b7",
                                name: "yapi-web",
                                livenessProbe: {
                                    failureThreshold: 10,
                                    httpGet: {
                                        path: "/",
                                        port: "web",
                                        scheme: "HTTP"
                                    },
                                    initialDelaySeconds: 30,
                                    periodSeconds: 10,
                                    successThreshold: 1,
                                    timeoutSeconds: 30
                                },
                                readinessProbe: {
                                    failureThreshold: 3,
                                    httpGet: {
                                        path: "/",
                                        port: "web",
                                        scheme: "HTTP"
                                    },
                                    initialDelaySeconds: 30,
                                    periodSeconds: 10,
                                    successThreshold: 1,
                                    timeoutSeconds: 10
                                },
                                resources: {
                                    limits: { cpu: "500m", memory: "1024Mi" },
                                    requests: { cpu: "500m", memory: "1024Mi" }
                                },
                                ports: [
                                    {
                                        containerPort: 3000,
                                        protocol: "TCP",
                                        name: "web"
                                    }
                                ],
                                env: [
                                    { name: "HOME", value: "/yapi" },
                                    { name: "VENDORS", value: "/yapi/vendors" },
                                    { name: "NODE_TLS_REJECT_UNAUTHORIZED", value: "0" },
                                    { name: "YAPI_ADMIN_ACCOUNT", value: "admin@admin.com" },
                                    { name: "YAPI_ADMIN_PASSWORD", value: config.require("YAPI_ADMIN_PASSWORD") },
                                    { name: "YAPI_CLOSE_REGISTER", value: "true" },
                                    { name: "YAPI_NPM_REGISTRY", value: "https://registry.npm.taobao.org" },
                                    { name: "YAPI_DB_SERVERNAME", value: "mongodb" },
                                    { name: "YAPI_DB_PORT", value: "27017" },
                                    { name: "YAPI_DB_DATABASE", value: "yapi" },
                                    { name: "YAPI_DB_USER", value: "yapi" },
                                    { name: "YAPI_DB_PASS", value: config.require("yapiPassword") },
                                    { name: "YAPI_DB_AUTH_SOURCE", value: "yapi" },
                                    { name: "YAPI_MAIL_ENABLE", value: "false" },
                                    { name: "YAPI_LDAP_LOGIN_ENABLE", value: "true" },
                                    { name: "YAPI_LDAP_LOGIN_SERVER", value: "ldap://192.168.0.251" },
                                    { name: "YAPI_LDAP_LOGIN_BASE_DN", value: "CN=Administrator,CN=Users,DC=example,DC=com" },
                                    { name: "YAPI_LDAP_LOGIN_BIND_PASSWORD", value: config.require("bindPassword") },
                                    { name: "YAPI_LDAP_LOGIN_SEARCH_DN", value: "OU=yapi,DC=example,DC=com" },
                                    { name: "YAPI_LDAP_LOGIN_SEARCH_STANDARD", value: "&(objectCategory=Person)(sAMAccountName=%s)" },
                                    { name: "YAPI_LDAP_LOGIN_EMAIL_POSTFIX", value: "" },
                                    { name: "YAPI_LDAP_LOGIN_EMAIL_KEY", value: "" },
                                    { name: "YAPI_LDAP_LOGIN_USERNAME_KEY", value: "sAMAccountName" },
                                    { name: "YAPI_PLUGINS", value: '[{"name":"ms-oauth","options":{"type":"oauth2","hostscheme":"https","hostname":"login.partner.microsoftonline.cn","authPath":"/8209af61-7dcc-42b8-8cdf-0745c5096e95/oauth2/v2.0/authorize","tokenPath":"/8209af61-7dcc-42b8-8cdf-0745c5096e95/oauth2/v2.0/token","redirectUri":"https://yapi.example.com/api/plugin/oauth2/callback","appId":"d4b1f920-ecf9-4386-adbc-e695565984ab","appSecret":"ffl3k8E~.s7VsXgXT-l3I5Xt_M5cX2xc3d"}}]' }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        service: {
            metadata: {
                labels: {
                    app: "yapi"
                },
                name: "yapi",
                namespace: "yapi"
            },
            spec: {
                ports: [
                    {
                        name: "yapi",
                        port: 3000,
                        protocol: "TCP",
                        targetPort: 3000,
                    }
                ],
                selector: {
                    app: "yapi",
                }
            }
        },
        ingress: {
            metadata: {
                annotations: {
                    "nginx.ingress.kubernetes.io/backend-protocol": "HTTP"
                },
                labels: {
                    app: "yapi"
                },
                name: "yapi",
                namespace: "yapi"
            },
            spec: {
                ingressClassName: "nginx",
                rules: [
                    {
                        host: "yapi.example.com",
                        http: {
                            paths: [
                                {
                                    backend: {
                                        service: {
                                            name: "yapi",
                                            port: {
                                                number: 3000,
                                            }
                                        }
                                    },
                                    path: "/",
                                    pathType: "Prefix",
                                }
                            ]
                        }
                    }
                ]
            }
        }
    }
]

for (var i in deploy_spec) {
    // Create Kubernetes Namespace.
    const namespace = new k8s.core.v1.Namespace(deploy_spec[i].namespace.metadata.name, {
        metadata: deploy_spec[i].namespace.metadata,
        spec: deploy_spec[i].namespace.spec
    });
    // Create Release Resource.
    const release = new k8s.helm.v3.Release(deploy_spec[i].helm.name, {
        namespace: deploy_spec[i].helm.namespace,
        name: deploy_spec[i].helm.name,
        chart: deploy_spec[i].helm.chart,
        version: deploy_spec[i].helm.version,
        values: deploy_spec[i].helm.values,
        skipAwait: false,
        repositoryOpts: {
            repo: deploy_spec[i].helm.repository,
        },
    }, { dependsOn: [namespace] });
    // Create Deployment Resource.
    const deployment = new k8s.apps.v1.Deployment(deploy_spec[i].deployment.metadata.name, {
        metadata: deploy_spec[i].deployment.metadata,
        spec: deploy_spec[i].deployment.spec
    }, { dependsOn: [namespace] });
    // Create Service Resource.
    const service = new k8s.core.v1.Service(deploy_spec[i].service.metadata.name, {
        metadata: deploy_spec[i].service.metadata,
        spec: deploy_spec[i].service.spec
    }, { dependsOn: [namespace] });
    // Create Ingress Resource.
    const ingress = new k8s.networking.v1.Ingress(deploy_spec[i].ingress.metadata.name, {
        metadata: deploy_spec[i].ingress.metadata,
        spec: deploy_spec[i].ingress.spec
    }, { dependsOn: [namespace] });
}