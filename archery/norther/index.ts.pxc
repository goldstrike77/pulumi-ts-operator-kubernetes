import * as k8s from "@pulumi/kubernetes";
import * as pulumi from "@pulumi/pulumi";
import * as random from "@pulumi/random";

let config = new pulumi.Config();

// Generate random minutes from 10 to 59.
const minutes = new random.RandomInteger("minutes", {
    seed: `${pulumi.getStack()}-${pulumi.getProject()}`,
    max: 59,
    min: 10,
});

// Generate random hours from UTC 17 to 21.
const hours = new random.RandomInteger("hours", {
    seed: `${pulumi.getStack()}-${pulumi.getProject()}`,
    max: 21,
    min: 17,
});

const deploy_spec = [
    {
        namespace: {
            metadata: {
                name: "archery",
                annotations: {},
                labels: {}
            },
            spec: {}
        },
        configmap: [
            {
                metadata: {
                    name: "archery-redis-config",
                    namespace: "archery",
                    annotations: {},
                    labels: {}
                },
                data: {
                    "redis-additional.conf": `appendonly no
maxmemory 200mb
tcp-keepalive 300
tcp-backlog 8192
maxclients 1000
databases 1
save ""
`
                }
            },
            {
                metadata: {
                    name: "archery-mysql-initdb",
                    namespace: "archery",
                    annotations: {},
                    labels: {}
                },
                data: {
                    "mysql-initdb.sql": `CREATE DATABASE IF NOT EXISTS archery;
CREATE USER 'archery'@'%' IDENTIFIED BY '${config.require("ARCHERY")}';
GRANT ALL PRIVILEGES ON archery.* TO 'archery'@'%';
flush privileges;`
                }
            }
        ],
        secret: [
            {
                metadata: {
                    annotations: {},
                    labels: {},
                    name: "archery-s3-credentials",
                    namespace: "archery"
                },
                type: "Opaque",
                data: {
                    "AWS_ACCESS_KEY_ID": Buffer.from(config.require("AWS_ACCESS_KEY_ID")).toString("base64"),
                    "AWS_SECRET_ACCESS_KEY": Buffer.from(config.require("AWS_SECRET_ACCESS_KEY")).toString("base64")
                },
                stringData: {}
            },
            {
                metadata: {
                    annotations: {},
                    labels: {},
                    name: "archery-mysql-credentials",
                    namespace: "archery"
                },
                type: "Opaque",
                data: {
                    clustercheck: Buffer.from(config.require("CLUSTERCHECK")).toString("base64"),
                    monitor: Buffer.from(config.require("MONITOR")).toString("base64"),
                    operator: Buffer.from(config.require("OPERATOR")).toString("base64"),
                    replication: Buffer.from(config.require("REPLICATION")).toString("base64"),
                    root: Buffer.from(config.require("ROOT")).toString("base64"),
                    xtrabackup: Buffer.from(config.require("XTRABACKUP")).toString("base64")
                },
                stringData: {}
            },
            {
                metadata: {
                    annotations: {},
                    labels: {},
                    name: "archery-redis-credentials",
                    namespace: "archery"
                },
                type: "Opaque",
                data: {
                    redis: Buffer.from(config.require("REDIS")).toString("base64")
                },
                stringData: {}
            }
        ],
        crds: [
            {
                apiVersion: "pxc.percona.com/v1",
                kind: "PerconaXtraDBCluster",
                metadata: {
                    name: "archery",
                    namespace: "archery",
                    finalizers: ["delete-pxc-pods-in-order"]
                },
                spec: {
                    crVersion: "1.13.0",
                    secretsName: "archery-mysql-credentials",
                    pause: false,
                    pxc: {
                        size: 3,
                        image: "percona/percona-xtradb-cluster:8.0.31-23.2",
                        imagePullPolicy: "IfNotPresent",
                        autoRecovery: true,
                        expose: { "enabled": false },
                        configuration: `[mysqld]
skip-name-resolve
explicit_defaults_for_timestamp
max_allowed_packet=16M
character-set-server=utf8mb4
collation-server=utf8mb4_0900_ai_ci
slow_query_log=0
max_connections=100
performance_schema_max_table_instances=256
table_definition_cache=400
table_open_cache=128
innodb_buffer_pool_size=256M
innodb_flush_log_at_trx_commit=2
[sst]
xbstream-opts=--decompress
[xtrabackup]
compress=lz4
`,
                        resources: {
                            limits: { cpu: "500m", memory: "512Mi" },
                            requests: { cpu: "500m", memory: "512Mi" }
                        },
                        affinity: { "antiAffinityTopologyKey": "kubernetes.io/hostname" },
                        volumeSpec: {
                            persistentVolumeClaim: {
                                storageClassName: "longhorn",
                                resources: {
                                    requests: {
                                        storage: "7G"
                                    }
                                }
                            }
                        }
                    },
                    haproxy: { enabled: false },
                    proxysql: { enabled: false },
                    logcollector: {
                        enabled: false,
                        image: "percona/percona-xtradb-cluster-operator:1.13.0-logcollector",
                        imagePullPolicy: "IfNotPresent",
                        resources: {
                            limits: { cpu: "100m", memory: "128Mi" },
                            requests: { cpu: "100m", memory: "128Mi" }
                        }
                    },
                    pmm: { enabled: false },
                    backup: {
                        allowParallel: false,
                        image: "percona/percona-xtradb-cluster-operator:1.13.0-pxc8.0-backup-pxb8.0.32",
                        imagePullPolicy: "IfNotPresent",
                        storages: {
                            "minio": {
                                type: "s3",
                                verifyTLS: true,
                                s3: {
                                    endpointUrl: "http://node30.node.home.local:9000",
                                    bucket: "backup",
                                    credentialsSecret: "archery-s3-credentials",
                                    region: "us-west-2"
                                }
                            }
                        },
                        pitr: {
                            enabled: true,
                            storageName: "minio",
                            timeBetweenUploads: 300,
                            resources: {
                                limits: { cpu: "200m", memory: "256Mi" },
                                requests: { cpu: "200m", memory: "256Mi" }
                            }
                        },
                        schedule: [
                            {
                                name: "daily-backup",
                                schedule: pulumi.interpolate`${minutes.result} ${hours.result} * * *`,
                                keep: 2,
                                storageName: "minio"
                            }
                        ]
                    }
                }
            },
            {
                apiVersion: "redis.redis.opstreelabs.in/v1beta2",
                kind: "Redis",
                metadata: {
                    name: "archery-redis",
                    namespace: "archery",
                },
                spec: {
                    redisConfig: {
                        additionalRedisConfig: "archery-redis-config"
                    },
                    kubernetesConfig: {
                        image: "quay.io/opstree/redis:v7.0.12",
                        imagePullPolicy: "IfNotPresent",
                        redisSecret: {
                            name: "archery-redis-credentials",
                            key: "redis"
                        },
                        resources: {
                            limits: { cpu: "100m", memory: "256Mi" },
                            requests: { cpu: "100m", memory: "256Mi" }
                        }
                    },
                    redisExporter: {
                        enabled: true,
                        image: "quay.io/opstree/redis-exporter:v1.44.0",
                        imagePullPolicy: "IfNotPresent",
                        resources: {
                            limits: { cpu: "50m", memory: "64Mi" },
                            requests: { cpu: "50m", memory: "64Mi" }
                        }
                    }
                }
            },
            {
                apiVersion: "monitoring.coreos.com/v1",
                kind: "PodMonitor",
                metadata: {
                    name: "archery-redis",
                    namespace: "archery"
                },
                spec: {
                    podMetricsEndpoints: [
                        {
                            interval: "60s",
                            scrapeTimeout: "30s",
                            scheme: "http",
                            targetPort: "redis-exporter",
                            relabelings: [
                                { sourceLabels: ["__meta_kubernetes_pod_name"], separator: ";", regex: "^(.*)$", targetLabel: "instance", replacement: "$1", action: "replace" },
                                { action: "replace", replacement: "demo", sourceLabels: ["__address__"], targetLabel: "customer" },
                                { action: "replace", replacement: "dev", sourceLabels: ["__address__"], targetLabel: "environment" },
                                { action: "replace", replacement: "SQL-Audit", sourceLabels: ["__address__"], targetLabel: "project" },
                                { action: "replace", replacement: "archery", sourceLabels: ["__address__"], targetLabel: "group" },
                                { action: "replace", replacement: "dc01", sourceLabels: ["__address__"], targetLabel: "datacenter" },
                                { action: "replace", replacement: "local", sourceLabels: ["__address__"], targetLabel: "domain" }
                            ]
                        }
                    ],
                    namespaceSelector: {
                        matchNames: ["archery"]
                    },
                    selector: {
                        matchLabels: {
                            "app": "archery-redis"
                        }
                    }
                }
            }
        ],
        helm: [
            {
                namespace: "archery",
                name: "archery",
                chart: "archery",
                repository: "https://douban.github.io/charts/",
                version: "0.3.2",
                values: {
                    replicaCount: 1,
                    image: {
                        repository: "hhyo/archery",
                        tag: "v1.10.0",
                        pullPolicy: "IfNotPresent"
                    },
                    fullnameOverride: "",
                    ingress: {
                        enabled: true,
                        className: "nginx",
                        hosts: ["archery.example.com"]
                    },
                    redis: {
                        embedded: false,
                        url: "redis://archery-redis:6379/0",
                        auth: {
                            password: config.require("REDIS")
                        }
                    },
                    mysql: {
                        embedded: false,
                        url: "mysql://root:@archery-pxc:3306/archery",
                        auth: {
                            database: "archery",
                            rootPassword: config.require("ROOT")
                        },
                    },
                    resources: {
                        limits: { cpu: "500m", memory: "512Mi" },
                        requests: { cpu: "500m", memory: "512Mi" }
                    },
                    configMap: {
                        enabled: true,
                        superuser: {
                            username: "admin",
                            password: "archery",
                            email: "archery@example.com"
                        }
                    }
                }
            },
            {
                namespace: "archery",
                name: "archery-pxc-0",
                chart: "prometheus-mysql-exporter",
                repository: "https://prometheus-community.github.io/helm-charts",
                version: "2.0.0",
                values: {
                    fullnameOverride: "archery-pxc-0",
                    serviceMonitor: {
                        enabled: true,
                        interval: "60s",
                        scrapeTimeout: "30s",
                        namespace: "archery",
                        relabelings: [
                            { sourceLabels: ["__meta_kubernetes_pod_name"], separator: ";", regex: "^(.*)$", targetLabel: "instance", replacement: "$1", action: "replace" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_customer"], targetLabel: "customer" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_environment"], targetLabel: "environment" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_project"], targetLabel: "project" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_group"], targetLabel: "group" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_datacenter"], targetLabel: "datacenter" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_domain"], targetLabel: "domain" }
                        ]
                    },
                    resources: {
                        limits: { cpu: "50m", memory: "64Mi" },
                        requests: { cpu: "50m", memory: "64Mi" }
                    },
                    podLabels: { customer: "demo", environment: "dev", project: "SQL-Audit", group: "archery", datacenter: "dc01", domain: "local" },
                    mysql: {
                        host: "archery-pxc-0.archery-pxc",
                        additionalConfig: ["connect-timeout=10"],
                        user: "monitor",
                        existingPasswordSecret: {
                            name: "archery-mysql-credentials",
                            key: "monitor"
                        }
                    }
                }
            },
            {
                namespace: "archery",
                name: "archery-pxc-1",
                chart: "prometheus-mysql-exporter",
                repository: "https://prometheus-community.github.io/helm-charts",
                version: "2.0.0",
                values: {
                    fullnameOverride: "archery-pxc-1",
                    serviceMonitor: {
                        enabled: true,
                        interval: "60s",
                        scrapeTimeout: "30s",
                        namespace: "archery",
                        relabelings: [
                            { sourceLabels: ["__meta_kubernetes_pod_name"], separator: ";", regex: "^(.*)$", targetLabel: "instance", replacement: "$1", action: "replace" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_customer"], targetLabel: "customer" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_environment"], targetLabel: "environment" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_project"], targetLabel: "project" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_group"], targetLabel: "group" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_datacenter"], targetLabel: "datacenter" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_domain"], targetLabel: "domain" }
                        ]
                    },
                    resources: {
                        limits: { cpu: "50m", memory: "64Mi" },
                        requests: { cpu: "50m", memory: "64Mi" }
                    },
                    podLabels: { customer: "demo", environment: "dev", project: "SQL-Audit", group: "archery", datacenter: "dc01", domain: "local" },
                    mysql: {
                        host: "archery-pxc-1.archery-pxc",
                        additionalConfig: ["connect-timeout=10"],
                        user: "monitor",
                        existingPasswordSecret: {
                            name: "archery-mysql-credentials",
                            key: "monitor"
                        }
                    }
                }
            },
            {
                namespace: "archery",
                name: "archery-pxc-2",
                chart: "prometheus-mysql-exporter",
                repository: "https://prometheus-community.github.io/helm-charts",
                version: "2.0.0",
                values: {
                    fullnameOverride: "archery-pxc-2",
                    serviceMonitor: {
                        enabled: true,
                        interval: "60s",
                        scrapeTimeout: "30s",
                        namespace: "archery",
                        relabelings: [
                            { sourceLabels: ["__meta_kubernetes_pod_name"], separator: ";", regex: "^(.*)$", targetLabel: "instance", replacement: "$1", action: "replace" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_customer"], targetLabel: "customer" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_environment"], targetLabel: "environment" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_project"], targetLabel: "project" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_group"], targetLabel: "group" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_datacenter"], targetLabel: "datacenter" },
                            { sourceLabels: ["__meta_kubernetes_pod_label_domain"], targetLabel: "domain" }
                        ]
                    },
                    resources: {
                        limits: { cpu: "50m", memory: "64Mi" },
                        requests: { cpu: "50m", memory: "64Mi" }
                    },
                    podLabels: { customer: "demo", environment: "dev", project: "SQL-Audit", group: "archery", datacenter: "dc01", domain: "local" },
                    mysql: {
                        host: "archery-pxc-2.archery-pxc",
                        additionalConfig: ["connect-timeout=10"],
                        user: "monitor",
                        existingPasswordSecret: {
                            name: "archery-mysql-credentials",
                            key: "monitor"
                        }
                    }
                }
            }
        ],
        job: {
            metadata: {
                name: "archery-mysql-init",
                namespace: "archery"
            },
            spec: {
                ttlSecondsAfterFinished: 60,
                template: {
                    "spec": {
                        "containers": [
                            {
                                "image": "percona/percona-xtradb-cluster:8.0.31-23.2",
                                "name": "archery-mysql-init",
                                "env": [
                                    {
                                        "name": "MYSQL_ROOT_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "name": "archery-mysql-credentials",
                                                "key": "root"
                                            }
                                        }
                                    }
                                ],
                                command: ["sh", "-c"],
                                args: ["mysql -uroot -p${MYSQL_ROOT_PASSWORD} -h archery-pxc < /tmp/mysql-initdb.sql"],
                                "volumeMounts": [
                                    {
                                        "name": "mysql-initdb",
                                        "mountPath": "/tmp"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "mysql-initdb",
                                "configMap": {
                                    "name": "archery-mysql-initdb"
                                }
                            }
                        ],
                        "restartPolicy": "OnFailure"
                    }
                }
            }
        }
    }
]

for (var i in deploy_spec) {
    // Create Kubernetes Namespace.
    const namespace = new k8s.core.v1.Namespace(deploy_spec[i].namespace.metadata.name, {
        metadata: deploy_spec[i].namespace.metadata,
        spec: deploy_spec[i].namespace.spec
    });
    // Create Kubernetes ConfigMap.
    for (var configmap_index in deploy_spec[i].configmap) {
        const configmap = new k8s.core.v1.ConfigMap(deploy_spec[i].configmap[configmap_index].metadata.name, {
            metadata: deploy_spec[i].configmap[configmap_index].metadata,
            data: deploy_spec[i].configmap[configmap_index].data,
        }, { dependsOn: [namespace] });
    }
    // Create Kubernetes Secret.
    for (var secret_index in deploy_spec[i].secret) {
        const secret = new k8s.core.v1.Secret(deploy_spec[i].secret[secret_index].metadata.name, {
            metadata: deploy_spec[i].secret[secret_index].metadata,
            type: deploy_spec[i].secret[secret_index].type,
            data: deploy_spec[i].secret[secret_index].data,
            stringData: deploy_spec[i].secret[secret_index].stringData
        }, { dependsOn: [namespace] });
    }
    // Create postgresql CRD.
    for (var crd_index in deploy_spec[i].crds) {
        const rules = new k8s.apiextensions.CustomResource(deploy_spec[i].crds[crd_index].metadata.name, {
            apiVersion: deploy_spec[i].crds[crd_index].apiVersion,
            kind: deploy_spec[i].crds[crd_index].kind,
            metadata: deploy_spec[i].crds[crd_index].metadata,
            spec: deploy_spec[i].crds[crd_index].spec
        }, { dependsOn: [namespace] });
    }
    // Create Release Resource.
    for (var helm_index in deploy_spec[i].helm) {
        const release = new k8s.helm.v3.Release(deploy_spec[i].helm[helm_index].name, {
            namespace: deploy_spec[i].helm[helm_index].namespace,
            name: deploy_spec[i].helm[helm_index].name,
            chart: deploy_spec[i].helm[helm_index].chart,
            version: deploy_spec[i].helm[helm_index].version,
            values: deploy_spec[i].helm[helm_index].values,
            skipAwait: true,
            repositoryOpts: {
                repo: deploy_spec[i].helm[helm_index].repository,
            },
        }, { dependsOn: [namespace] });
    }
    // Create single job.
    //const job = new k8s.batch.v1.Job(deploy_spec[i].job.metadata.name, {
    //    metadata: deploy_spec[i].job.metadata,
    //    spec: deploy_spec[i].job.spec
    //}, { dependsOn: [namespace] });
}